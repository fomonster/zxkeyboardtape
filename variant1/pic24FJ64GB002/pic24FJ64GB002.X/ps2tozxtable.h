#define IK_SHIFT 3
#define IK_CTRL 12
#define IK_ALT 48
#define IK_LEFT 1
#define IK_RIGHT 2
#define IK_UP 4
#define IK_DOWN 8
#define IK_FIRE 16
#define IK_FIRE2 32

/*
 *  DOS/Commands
 */

const char* fileNameAutoexec = "main.tap";
const char* fileNameSaveTemplate = "saved000.tap";

const uint8_t strVer[] = {21, 8, 16, 44, 25, 8, 21, 44, 30, 55, 39, 39, 0}; // "rem ver 1.00"
const uint8_t strOk[] = { 18, 14, 0 }; //"ok"
const uint8_t strLoad[] = { 81, 40, 3, 3, 3, 3, 3, 3, 3, 15, 18, 4, 7, 44, 249, 3, 249, 40, 0 }; //"{down}{enter}load ""{enter}" 

// 22, X, Y - set position
// 21, X, Y, C - clear color rect
// 20, X, Y - clear pixel rect
// 19, X, Y - frame
// 18, C - border color

//const uint8_t strZXStrTop[] = { 18, 0, 22, 0, 0, 21, 32, 1, 0b00111000, 22, 6, 0,'S', 'D', ' ', 'c', 'a', 'r', 'd', 22, 23, 0, 'I', 'n', 'f', 'o' }; 
const uint8_t strZXStrTop[] = { 18, 0, 22, 0, 0, 21, 32, 1, 0b00111000, 22, 12, 0, 'S', 'D', ' ', 'c', 'a', 'r', 'd' }; 

//const uint8_t strZXStrFiles[] = { 22, 0, 1 }; // , 21, 32, 22, 0b00010111, 20, 32, 22, 19, 32, 22
const uint8_t strZXStrFiles[] = { 22, 0, 1, 21, 32, 17, 0b00010111, 20, 32, 17, 19, 32, 17 };

//const uint8_t strZXStrInfo[] = { 22, 18, 1, 21, 14, 22, 0b00010111, 20, 14, 22, 19, 14, 22 };
const uint8_t strZXStrInfo[] = { 22, 0, 18, 21, 32, 6, 0b00010111, 21, 32, 1, 0b00111000, 20, 32, 5, 22, 0, 19, 19, 32, 5, 22, 14, 18, 'I', 'n', 'f', 'o' };
const uint8_t strZXStrInfoLoad[] = { 22, 1, 20, 'L', 'o', 'a', 'd', ':' };
const uint8_t strZXStrInfoSave[] = { 22, 1, 21, 'S', 'a', 'v', 'e', ':' };

//const uint8_t strZXStrInfoLoad[] = { 22, 0, 23, 21, 32, 23, 0b00111000, 22, 2, 23, 'F', '1'}; 

const uint8_t strZXStrCursor[] = { 21, 32, 1, 0b00111000 }; 
const uint8_t strZXStrCursorPrev[] = { 21, 32, 1, 0b00010111 }; 

/*
 *  Shift + Alt + Ctrl
 */
const uint8_t importantKeys[6] = 
{
    // For keyboard
    225, 229, // shift
    224, 228, // ctrl
    226, 230   // alt
};

/*
 *  Codes replaced by CS + SS on start and repeated after delay 2600 
 */
const uint8_t replaceOnDelayKeyDown[8] = 
{
    76, // DELETE
    47, // [
    48, // ]
    245, // \ + Shift = |
    246, // [ + Shift = {
    247, // ] + Shift = }
    232, // ` + Shift = ~
    49 // 
};

/*
 *  Codes replaced when Shift key down (delayed 2 press mechanic)
 */
const uint8_t replaceOnShiftKeyDown[42] = 
{    
    30, 233, // 1 + Shift = !
    31, 234, // 2 + Shift = @
    32, 235, // 3 + Shift = #
    33, 236, // 4 + Shift = $
    34, 237, // 5 + Shift = %
    35, 238, // 6 + Shift = ^
    36, 239, // 7 + Shift = &
    37, 240, // 8 + Shift = *
    38, 241, // 9 + Shift = (
    39, 242, // 0 + Shift = )
    45, 243, // - + Shift = _
    46, 244, // = + Shift = +
    49, 245, // \ + Shift = |
    51, 248, // ; + Shift = :
    52, 249, // ' + Shift = "
    54, 250, // , + Shift = <
    55, 251, // . + Shift = >
    56, 252, // / + Shift = ? 
    14, 232, // ` + Shift = ~
    47, 246, // [ + Shift = {
    48, 247 // ] + Shift = }
 };

/*
 *  ps2 codes table
 *   This table was automatically generated by TableGen.xlsm 
 */
const uint8_t codeToMatrix[256] = 
{
    0xFF, //  0     
    0xFF, //  1     
    0xFF, //  2     
    0xFF, //  3     
    0x1, //  4 (A) A
    0x27, //  5 (B) B
    0x18, //  6 (C) C
    0x11, //  7 (D) D
    0x12, //  8 (E) E
    0x19, //  9 (F) F
    0x21, //  10 (G) G
    0x26, //  11 (H) H
    0x15, //  12 (I) I
    0x1E, //  13 (J) J
    0x16, //  14 (K) K
    0xE, //  15 (L) L
    0x17, //  16 (M) M
    0x1F, //  17 (N) N
    0xD, //  18 (O) O
    0x5, //  19 (P) P
    0x2, //  20 (Q) Q
    0x1A, //  21 (R) R
    0x9, //  22 (S) S
    0x22, //  23 (T) T
    0x1D, //  24 (U) U
    0x20, //  25 (V) V
    0xA, //  26 (W) W
    0x10, //  27 (X) X
    0x25, //  28 (Y) Y
    0x8, //  29 (Z) Z
    0x3, //  30 (1) 1
    0xB, //  31 (2) 2
    0x13, //  32 (3) 3
    0x1B, //  33 (4) 4
    0x23, //  34 (5) 5
    0x24, //  35 (6) 6
    0x1C, //  36 (7) 7
    0x14, //  37 (8) 8
    0xC, //  38 (9) 9
    0x4, //  39 (0) 0
    0x6, //  40 (EN) RETURN_ENTER
    0x43, //  41 (1+CS) ESCAPE
    0x44, //  42 (0+CS) DELETE
    0xFF, //  43     TAB
    0x7, //  44 (SP) SPACEBAR
    0x9E, //  45 (J+SS) MINUS_AND_UNDERSCORE
    0x8E, //  46 (L+SS) EQUAL_AND_PLUS
    0xE5, //  47 (Y+CS+SS) OPEN_BRACKET_AND_OPEN_CURLY_BRACE
    0xDD, //  48 (U+CS+SS) CLOSE_BRACKET_AND_CLOSE_CURLY_BRACE
    0xD1, //  49 (D+CS+SS) BACK_SLASH_AND_PIPE
    0x9C, //  50 (7+SS) NON_US_HASH_AND_TILDE
    0x8D, //  51 (O+SS) SEMICOLON_AND_COLON
    0x9C, //  52 (7+SS) APOSTROPHE_AND_QUOTE
    0x9C, //  53 (7+SS) GRAVE_ACCENT_AND_TILDE
    0x9F, //  54 (N+SS) COMMA_AND_LESS_THAN
    0x97, //  55 (M+SS) PERIOD_AND_GREATER_THAN
    0xA0, //  56 (V+SS) FORWARD_SLASH_AND_QUESTION_MARK
    0x4B, //  57 (2+CS) CAPS_LOCK
    0xFF, //  58     F1
    0xFF, //  59     F2
    0xFF, //  60     F3
    0xFF, //  61     F4
    0xFF, //  62     F5
    0xFF, //  63     F6
    0xFF, //  64     F7
    0xFF, //  65     F8
    0xFF, //  66     F9
    0xFF, //  67     F10
    0xFF, //  68     F11
    0xFF, //  69     F12
    0xFF, //  70     PRINT_SCREEN
    0xFF, //  71     SCROLL_LOCK
    0xFF, //  72     PAUSE
    0xFF, //  73     INSERT
    0xFF, //  74     HOME
    0xFF, //  75     PAGE_UP
    0xD6, //  76 (K+CS+SS) DELETE_FORWARD
    0xFF, //  77     END
    0xFF, //  78     PAGE_DOWN
    0x54, //  79 (8+CS) RIGHT_ARROW
    0x63, //  80 (5+CS) LEFT_ARROW
    0x64, //  81 (6+CS) DOWN_ARROW
    0x5C, //  82 (7+CS) UP_ARROW
    0xFF, //  83     KEYPAD_NUM_LOCK_AND_CLEAR
    0xA0, //  84 (V+SS) KEYPAD_BACK_SLASH
    0xA7, //  85 (B+SS) KEYPAD_ASTERISK
    0x9E, //  86 (J+SS) KEYPAD_MINUS
    0x96, //  87 (K+SS) KEYPAD_PLUS
    0x6, //  88 (EN) KEYPAD_ENTER
    0x3, //  89 (1) KEYPAD_1_AND_END
    0xB, //  90 (2) KEYPAD_2_AND_DOWN_ARROW
    0x13, //  91 (3) KEYPAD_3_AND_PAGE_DOWN
    0x1B, //  92 (4) KEYPAD_4_AND_LEFT_ARROW
    0x23, //  93 (5) KEYPAD_5
    0x24, //  94 (6) KEYPAD_6_AND_RIGHT_ARROW
    0x1C, //  95 (7) KEYPAD_7_AND_HOME
    0x14, //  96 (8) KEYPAD_8_AND_UP_ARROW
    0xC, //  97 (9) KEYPAD_9_AND_PAGE_UP
    0x4, //  98 (0) KEYPAD_0_AND_INSERT
    0x97, //  99 (M+SS) KEYPAD_PERIOD_AND_DELETE
    0xA0, //  100 (V+SS) NON_US_FORWARD_SLASH_AND_PIPE
    0xFF, //  101     APPLICATION
    0xFF, //  102     POWER
    0xFF, //  103     EQUAL_SIZE
    0xFF, //  104     F13
    0xFF, //  105     F14
    0xFF, //  106     F15
    0xFF, //  107     F16
    0xFF, //  108     F17
    0xFF, //  109     F18
    0xFF, //  110     F19
    0xFF, //  111     F20
    0xFF, //  112     F21
    0xFF, //  113     F22
    0xFF, //  114     F23
    0xFF, //  115     F24
    0xFF, //  116     EXECUTE
    0xFF, //  117     HELP
    0xFF, //  118     MENU
    0xFF, //  119     SELECT
    0xFF, //  120     STOP
    0xFF, //  121     AGAIN
    0xFF, //  122     UNDO
    0xFF, //  123     CUT
    0xFF, //  124     COPY
    0xFF, //  125     PASTE
    0xFF, //  126     FIND
    0xFF, //  127     MUTE
    0xFF, //  128     VOLUME_UP
    0xFF, //  129     VOLUME_DOWN
    0xFF, //  130     LOCKING_CAPS_LOCK
    0xFF, //  131     LOCKING_NUM_LOCK
    0xFF, //  132     LOCKING_SCROLL_LOCK
    0xFF, //  133     USB_HID_KEYBOARD_KEYPAD_KEYPAD_COMMA
    0xFF, //  134     USB_HID_KEYBOARD_KEYPAD_KEYPAD_EQUAL_SIGN
    0xFF, //  135     INTERNATIONAL1
    0xFF, //  136     INTERNATIONAL2
    0xFF, //  137     INTERNATIONAL3
    0xFF, //  138     INTERNATIONAL4
    0xFF, //  139     INTERNATIONAL5
    0xFF, //  140     INTERNATIONAL6
    0xFF, //  141     INTERNATIONAL7
    0xFF, //  142     INTERNATIONAL8
    0xFF, //  143     INTERNATIONAL9
    0xFF, //  144     LANG1
    0xFF, //  145     LANG2
    0xFF, //  146     LANG3
    0xFF, //  147     LANG4
    0xFF, //  148     LANG5
    0xFF, //  149     LANG6
    0xFF, //  150     LANG7
    0xFF, //  151     LANG8
    0xFF, //  152     LANG9
    0xFF, //  153     ALTERNATE_ERASE
    0xFF, //  154     SYS_REQ_ATTENTION
    0xFF, //  155     CANCEL
    0xFF, //  156     CLEAR
    0xFF, //  157     PRIOR
    0xFF, //  158     RETURN
    0xFF, //  159     SEPARATOR
    0xFF, //  160     OUT
    0xFF, //  161     OPER
    0xFF, //  162     CLEAR_AGAIN
    0xFF, //  163     CR_SEL_PROPS
    0xFF, //  164     EX_SEL
    0xFF, //  165     
    0xFF, //  166     
    0xFF, //  167     
    0xFF, //  168     
    0xFF, //  169     
    0xFF, //  170     
    0xFF, //  171     
    0xFF, //  172     
    0xFF, //  173     
    0xFF, //  174     
    0xFF, //  175     
    0xFF, //  176     KEYPAD_00
    0xFF, //  177     KEYPAD_000
    0xFF, //  178     THOUSANDS_SEPARATOR
    0xFF, //  179     DECIMAL_SEPARATOR
    0xFF, //  180     CURRENCY_UNIT
    0xFF, //  181     CURRENTY_SUB_UNIT
    0xFF, //  182     KEYPAD_OPEN_PARENTHESIS
    0xFF, //  183     KEYPAD_CLOSE_PARENTHESIS
    0xFF, //  184     KEYPAD_OPEN_CURLY_BRACE
    0xFF, //  185     KEYPAD_CLOSE_CURLY_BRACE
    0xFF, //  186     KEYPAD_TAB
    0xFF, //  187     KEYPAD_BACKSPACE
    0xFF, //  188     KEYPAD_A
    0xFF, //  189     KEYPAD_B
    0xFF, //  190     KEYPAD_C
    0xFF, //  191     KEYPAD_D
    0xFF, //  192     KEYPAD_E
    0xFF, //  193     KEYPAD_F
    0xFF, //  194     KEYPAD_XOR
    0xFF, //  195     KEYPAD_CARROT
    0xFF, //  196     KEYPAD_PERCENT_SIGN
    0xFF, //  197     KEYPAD_LESS_THAN
    0xFF, //  198     KEYPAD_GREATER_THAN
    0xFF, //  199     KEYPAD_AMPERSAND
    0xFF, //  200     KEYPAD_DOUBLE_AMPERSAND
    0xFF, //  201     KEYPAD_PIPE
    0xFF, //  202     KEYPAD_DOUBLE_PIPE
    0xFF, //  203     KEYPAD_COLON
    0xFF, //  204     KEYPAD_HASH
    0xFF, //  205     KEYPAD_SPACE
    0xFF, //  206     KEYPAD_AT
    0xFF, //  207     KEYPAD_EXCLAMATION_POINT
    0xFF, //  208     KEYPAD_MEMORY_STORE
    0xFF, //  209     KEYPAD_MEMORY_RECALL
    0xFF, //  210     KEYPAD_MEMORY_CLEAR
    0xFF, //  211     KEYPAD_MEMORY_ADD
    0xFF, //  212     KEYPAD_MEMORY_SUBTRACT
    0xFF, //  213     KEYPAD_MEMORY_MULTIPLY
    0xFF, //  214     KEYPAD_MEMORY_DIVIDE
    0xFF, //  215     KEYPAD_PLUS_MINUS
    0xFF, //  216     KEYPAD_CLEAR
    0xFF, //  217     KEYPAD_CLEAR_ENTRY
    0xFF, //  218     KEYPAD_BINARY
    0xFF, //  219     KEYPAD_OCTAL
    0xFF, //  220     KEYPAD_DECIMAL
    0xFF, //  221     KEYPAD_HEXADECIMAL
    0xFF, //  222     
    0xFF, //  223     
    0xFF, //  224     LEFT_CONTROL
    0xFF, //  225     LEFT_SHIFT
    0xFF, //  226     LEFT_ALT
    0xFF, //  227     LEFT_GUI
    0xFF, //  228     RIGHT_CONTROL
    0xFF, //  229     RIGHT_SHIFT
    0xFF, //  230     RIGHT_ALT
    0xFF, //  231     RIGHT_GUI
    0xC1, //  232 (A+CS+SS) ` + Shift = ~
    0x83, //  233 (1+SS) 1 + Shift = !
    0x8B, //  234 (2+SS) 2+ Shift = @
    0x93, //  235 (3+SS) 3+ Shift = #
    0x9B, //  236 (4+SS) 4 + Shift = $
    0xA3, //  237 (5+SS) 5 + Shift = %
    0xA6, //  238 (H+SS) 6 + Shift = ^
    0xA4, //  239 (6+SS) 7 + Shift = &
    0xA7, //  240 (B+SS) 8 + Shift = *
    0x94, //  241 (8+SS) 9 + Shift = (
    0x8C, //  242 (9+SS) 0 + Shift = )
    0x84, //  243 (0+SS) - + Shift = _
    0x96, //  244 (K+SS) = + Shift = +
    0xC9, //  245 (S+CS+SS) \ + Shift = |
    0xD9, //  246 (F+CS+SS) [ + Shift = {
    0xE1, //  247 (G+CS+SS) ] + Shift = }
    0x88, //  248 (Z+SS) ; + Shift = :
    0x85, //  249 (P+SS)  + Shift = "
    0x9A, //  250 (R+SS) , + Shift = <
    0xA2, //  251 (T+SS) . + Shift = >
    0x98, //  252 (C+SS) / + Shift = ?
    0xC0, //  253 (CS+CS+SS) CS + SS
    0xFF, //  254     
    0xFF, //  255     
    
};



